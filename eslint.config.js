import globals from "globals";
import js from "@eslint/js";
import regexp from "eslint-plugin-regexp";
import unicorn from "eslint-plugin-unicorn";

export default [
  js.configs.recommended,
  regexp.configs["flat/recommended"],
  unicorn.configs.recommended,
  {
    rules: {
      "arrow-body-style": "error",
      "camelcase": "error",
      "curly": "error",
      "consistent-this": "error",
      "dot-notation": "error",
      "eqeqeq": "error",
      "func-style": "error",
      "guard-for-in": "error",
      "init-declarations": "error",
      "max-nested-callbacks": "error",
      "max-params": "error",
      "new-cap": "error",
      "no-alert": "error",
      "no-duplicate-imports": "error",
      "no-array-constructor": "error",
      "no-bitwise": "error",
      "no-caller": "error",
      "no-div-regex": "error",
      "no-else-return": "error",
      "no-eq-null": "error",
      "no-eval": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-implicit-coercion": "error",
      "no-implied-eval": "error",
      "no-inline-comments": "error",
      "no-iterator": "error",
      "no-label-var": "error",
      "no-labels": "error",
      "no-lone-blocks": "error",
      "no-lonely-if": "error",
      "no-loop-func": "error",
      "no-magic-numbers": ["error", { ignore: [0, 1, -1] }],
      "no-multi-str": "error",
      "no-negated-condition": "error",
      "no-nested-ternary": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-object": "error",
      "no-new-wrappers": "error",
      "no-octal-escape": "error",
      "no-param-reassign": "error",
      "no-proto": "error",
      "no-restricted-syntax": [
        "error",
        {
          selector: "FunctionDeclaration",
          message: "Use arrow functions when possible",
        },
        {
          selector: "WithStatement",
          message: "The 'with' statement is deprecated and should not be used",
        },
        {
          selector: "BinaryExpression[operator='in']",
          message: "Use Object.hasOwn() for own properties",
        },
        {
          selector: "CallExpression[callee.property.name='hasOwnProperty']",
          message: "Use Object.hasOwn() instead of hasOwnProperty()",
        },
      ],
      "no-return-assign": "error",
      "no-script-url": "error",
      "no-self-compare": "error",
      "no-shadow": "error",
      "no-throw-literal": "error",
      "no-underscore-dangle": "error",
      "no-unneeded-ternary": "error",
      "no-unused-expressions": "error",
      "no-use-before-define": "error",
      "no-useless-assignment": "error",
      "no-useless-call": "error",
      "no-useless-concat": "error",
      "no-var": "error",
      "no-void": "error",
      "object-shorthand": "error",
      "one-var": ["error", "never"],
      "operator-assignment": "error",
      "prefer-arrow-callback": ["error", { allowUnboundThis: false }],
      "prefer-const": "error",
      "prefer-spread": "error",
      "radix": "error",
      "require-await": "error",
      "sort-vars": "error",
      "spaced-comment": "error",
      "unicorn/numeric-separators-style": "off",
      "yoda": "error",
    },
  },
  {
    files: ["src/js/**", "tests/playwright/**"],
    languageOptions: {
      globals: { ...globals.browser },
    },
    rules: {
      "no-console": "error",
    },
  },
];
